/*
 * BgForm.java
 *
 * Created on November 30, 2006, 12:33 PM
 */

package com.family.solitaire.ui;

import static com.family.solitaire.model.CardConstants.NCARDS;
import static com.family.solitaire.model.CardConstants.NCOLS;
import static com.family.solitaire.ui.UIConstants.CARDWIDTH;
import static com.family.solitaire.ui.UIConstants.FIRSTCARDX;
import static com.family.solitaire.ui.UIConstants.LEFTMARGIN;
import static com.family.solitaire.ui.UIConstants.TOPMARGIN;

import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.JOptionPane;
import javax.swing.Timer;

import com.family.solitaire.model.Game;
import com.family.solitaire.model.Move;
import com.family.solitaire.model.Position;

/**
 *
 * @author  ading
 */
public class MainPanel extends javax.swing.JPanel {
    
    /** Creates new form BgForm */
    public MainPanel(Game game) {
        super();
        initComponents();
        this.setFocusable(true);
        this.game = game;
        
        tmpColumn = new TmpColumnCtrl();
        tmpColumn.setVisible(false);
        add(tmpColumn);
        
        reserve = new ReserveCtrl(game.getReserve());
        add(reserve);
        
        columns = new ColumnCtrl[NCOLS];
        for (int i=0; i<NCOLS; i++) {
            add(columns[i] = new ColumnCtrl(game.getColumn(i)));
        }
        
        relativePos = new Point(0, 0);
        
        pressing = false;
    }
    
    public void initColumns() {
        for (int i=0; i<NCOLS; i++) {
            columns[i].resetCardsSpace();
        }
    }
    
    public void hilightHint(Move move) {
        if (!pressing && move!=null && !move.isUseReserve()) {
            this.move = move;
            timer.start();
        }
    }
    
    private ActionListener taskPerformer = new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            if (timerCount == 0) {
                columns[move.getFrom().column].highlight(move.getFrom().row);
            } else if (timerCount == 1) {
                columns[move.getFrom().column].highlightOff();
            } else if (timerCount == 2) {
                columns[move.getTo().column].highlight(move.getTo().row);
            } else if (timerCount == 3) {
                columns[move.getTo().column].highlightOff();
            }
            timerCount++;
            if (timerCount == 4) {
                timerCount = 0;
                move = null;
                timer.stop();
            }
        }
    };
    
    private int timerCount = 0;
    private Timer timer = new Timer(200, taskPerformer);
    private Move move;
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(null);

        setBackground(new java.awt.Color(0, 112, 26));
        setMinimumSize(new java.awt.Dimension(660, 500));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                onPressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                onReleased(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                onComponentResized(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                onDragged(evt);
            }
        });
        addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                onAncestorResized(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                onKeyTyped(evt);
            }
        });

    }// </editor-fold>//GEN-END:initComponents

    private void onKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_onKeyTyped
        if (evt.getKeyChar() == 'h' || evt.getKeyChar() == 'H') {
            doHint();
        }
    }//GEN-LAST:event_onKeyTyped

    private void onAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_onAncestorResized
        reshape();
    }//GEN-LAST:event_onAncestorResized

    private void onMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onMouseClicked

        if (reserve.getBounds().contains(evt.getPoint())) {
            if (game.useReserve()) {
                reserve.repaint();
                
                if (game.checkResult()) {
                    JOptionPane.showMessageDialog(this, "You win!");
                } else if (game.getAvailableMove() == null) {
                    JOptionPane.showMessageDialog(this, "You Lose!");
                }
            }
        }
    }//GEN-LAST:event_onMouseClicked

    private void onComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_onComponentResized
        reshape();
    }//GEN-LAST:event_onComponentResized

    private void onReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onReleased
        
        switch (evt.getButton()) {
            case java.awt.event.MouseEvent.BUTTON1:
                onLeftBtnReleased(evt);
                return;
            case java.awt.event.MouseEvent.BUTTON3:
                onRightBtnReleased(evt);
                return;
            default:
        }
    }//GEN-LAST:event_onReleased

    private void onPressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onPressed
        switch (evt.getButton()) {
            case java.awt.event.MouseEvent.BUTTON1:
                onLeftBtnPressed(evt);
                return;
            case java.awt.event.MouseEvent.BUTTON3:
                onRightBtnPressed(evt);
                return;
            default:
        }
    }//GEN-LAST:event_onPressed

    private void onDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onDragged
        tmpColumn.setBounds(
            evt.getPoint().x - relativePos.x, 
            evt.getPoint().y - relativePos.y, 
            tmpColumn.getWidth(), 
            tmpColumn.getHeight());
    }//GEN-LAST:event_onDragged
    
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    private void doHint() {
        if (availableMoves == null) {
            availableMoves = game.getAvailableMove();
            curMove = 0;
        }
        if (availableMoves.length>0) {
            hilightHint(availableMoves[curMove++]);
            if (curMove == availableMoves.length) {
                curMove = 0;
            }
        }
    }
    
    private void onLeftBtnPressed(java.awt.event.MouseEvent evt) {
        Position p = getPosition(evt.getPoint());
        if (p == null)
            return;

        if (game.isValidFrom(p)) {
            pressing = true;

            columns[p.column].selectRow(p.row);
            
            Point cardPos = columns[p.column].getCardPosition(p.row);

            relativePos.x = evt.getX() - cardPos.x;
            relativePos.y = evt.getY() - cardPos.y;
            
            tmpColumn.setCards(game.getCards(p));
            tmpColumn.setCardSpace(columns[p.column].getCardSpace());
            tmpColumn.calHeight();
            tmpColumn.setBounds(
                cardPos.x, 
                cardPos.y, 
                tmpColumn.getWidth(), 
                tmpColumn.getHeight());

            tmpColumn.setVisible(true);
            
            from = p;
            from.row--;
        }
    }
    
    private void onRightBtnPressed(java.awt.event.MouseEvent evt) {
        if (pressing)
            return;
        
        Position p = getPosition(evt.getPoint());
        if (p == null)
            return;
        columns[p.column].viewCard(p.row);
        viewColumn = p.column;
    }
    
    private void onLeftBtnReleased(java.awt.event.MouseEvent evt) {

        if (pressing) {
            tmpColumn.setVisible(false);
            pressing = false;

            Position[] positions = getToPositions();
            Move[] moves = new Move[positions.length];
            for (int i=0; i<moves.length; i++) {
                moves[i] = new Move(from, positions[i]);
            }
            columns[from.column].resetSelectedRow();
            Move move = game.move(moves);

            if (move != null) {
                availableMoves = null;
                curMove = 0;
                if (game.checkResult()) {
                    JOptionPane.showMessageDialog(this, "You win!");
                } else if (game.getAvailableMove() == null) {
                    JOptionPane.showMessageDialog(this, "You Lose!");
                }
            }
        }
    }
    
    private void onRightBtnReleased(java.awt.event.MouseEvent evt) {
        columns[viewColumn].viewCardOff();
    }
    
    private void reshape() {
        reserve.setBounds(LEFTMARGIN, TOPMARGIN, reserve.getWidth(), reserve.getHeight());
        
        int gap = (getWidth()-FIRSTCARDX-NCOLS*CARDWIDTH)/(NCOLS+1);
        int x = FIRSTCARDX + gap;
        int interval = gap + CARDWIDTH;
        for (int i=0; i<NCOLS; i++) {
            columns[i].resetCardsSpace();
            columns[i].setBounds(x, TOPMARGIN, columns[i].getWidth(), columns[i].getHeight());
            x += interval;
        }
    }
    
    private Position[] getToPositions() {
        ArrayList<Position> ret = new ArrayList<Position>(NCARDS);
        Rectangle rvDes = new Rectangle();
        Rectangle rv = tmpColumn.getBounds();
        for(int i=0; i<NCOLS; i++) {
            columns[i].getLastCardBounds(rvDes);
            if (rv.intersects(rvDes)) {
                ret.add(new Position(columns[i].getCardssize()-1, i));
            }
        }
        return ret.toArray(new Position[0]);
    }
    
    private Position getPosition(Point point) {
        Rectangle rv = new Rectangle();
        for (ColumnCtrl column : columns) {
            column.getBounds(rv);
            if (rv.contains(point)) {
                int row = column.getRow(point.y);
                if (row != -1) {
                    return new Position(row, column.getColumn());
                }
                break;
            }
        }

        return null;
    }

    private Game game;

    private ReserveCtrl reserve;
    private ColumnCtrl[] columns;
    private TmpColumnCtrl tmpColumn;
    
    private boolean pressing;
    private Point relativePos;
    private int viewColumn;
    
    private Position from;
    
    private Move[] availableMoves;
    private int curMove;
}
