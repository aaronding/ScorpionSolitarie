/*
 * MainFrame.java
 *
 * Created on November 29, 2006, 10:15 PM
 */

package com.family.solitaire.ui;

import java.awt.LayoutManager;
import java.util.TreeMap;

import javax.swing.JDialog;
import javax.swing.JOptionPane;

import com.family.about.AboutDialog;
import com.family.help.HelpDialog;
import com.family.solitaire.model.Game;

/**
 *
 * @author  Aaron
 */
public class MainFrame extends javax.swing.JFrame {
    
    /** Creates new form MainFrame */
    public MainFrame() {
        super();

        LayoutManager l = getContentPane().getLayout();
        initComponents();
        getContentPane().setLayout(l);
        setSize(800,600);
        setLocationRelativeTo(this);
        
        game = new Game();
        MainPanel mainPanel = new MainPanel(game);

        getContentPane().add(mainPanel);
        
        levelDlg = new JDialog(this, "Difficulty", true);
        pane = new LevelPanel();
        levelDlg.setContentPane(pane);
        levelDlg.pack();
        levelDlg.setLocationRelativeTo(this);
        levelDlg.setResizable(false);
        
        rearDlg = new JDialog(this, "Select Card Back", true);
        rearPane = new RearPanel();
        rearDlg.setContentPane(rearPane);
        rearDlg.pack();
        rearDlg.setLocationRelativeTo(this);
        rearDlg.setResizable(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        menuBar = new javax.swing.JMenuBar();
        gameMenu = new javax.swing.JMenu();
        deal = new javax.swing.JMenuItem();
        difficulty = new javax.swing.JMenuItem();
        sep = new javax.swing.JSeparator();
        load = new javax.swing.JMenuItem();
        save = new javax.swing.JMenuItem();
        sep1 = new javax.swing.JSeparator();
        deck = new javax.swing.JMenuItem();
        sep2 = new javax.swing.JSeparator();
        undo = new javax.swing.JMenuItem();
        redo = new javax.swing.JMenuItem();
        sep3 = new javax.swing.JSeparator();
        exit = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contents = new javax.swing.JMenuItem();
        sep4 = new javax.swing.JSeparator();
        about = new javax.swing.JMenuItem();

        getContentPane().setLayout(null);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(APP_NAME);
        setIconImage(ImageStore.instance().getIcon());
        setMinimumSize(new java.awt.Dimension(660, 500));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                onWindowOpened(evt);
            }
        });

        gameMenu.setText("Game");
        deal.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        deal.setText("Deal");
        deal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dealActionPerformed(evt);
            }
        });

        gameMenu.add(deal);

        difficulty.setText("Difficulty");
        difficulty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                difficultyActionPerformed(evt);
            }
        });

        gameMenu.add(difficulty);

        gameMenu.add(sep);

        load.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        load.setText("Load");
        load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadActionPerformed(evt);
            }
        });

        gameMenu.add(load);

        save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        gameMenu.add(save);

        gameMenu.add(sep1);

        deck.setText("Deck");
        deck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deckActionPerformed(evt);
            }
        });

        gameMenu.add(deck);

        gameMenu.add(sep2);

        undo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undo.setText("Undo");
        undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoActionPerformed(evt);
            }
        });

        gameMenu.add(undo);

        redo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        redo.setText("Redo");
        redo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoActionPerformed(evt);
            }
        });

        gameMenu.add(redo);

        gameMenu.add(sep3);

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        gameMenu.add(exit);

        menuBar.add(gameMenu);

        helpMenu.setText("Help");
        contents.setText("Contents");
        contents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contentsActionPerformed(evt);
            }
        });

        helpMenu.add(contents);

        helpMenu.add(sep4);

        about.setText("About " + APP_NAME);
        about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutActionPerformed(evt);
            }
        });

        helpMenu.add(about);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void contentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contentsActionPerformed
        HelpDialog dlg = new HelpDialog(this, false, APP_NAME);
        dlg.setVisible(true);
    }//GEN-LAST:event_contentsActionPerformed

    private void aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutActionPerformed
        AboutDialog about = new AboutDialog(this, true, 
            ImageStore.instance().getIcon(), APP_NAME, "1.0", "Aaron Ding", 
            "aaron.ding@hotmail.com");
        about.setLocationRelativeTo(this);
        about.setVisible(true);
    }//GEN-LAST:event_aboutActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    private void deckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deckActionPerformed
        rearDlg.setVisible(true);
        if (rearPane.isok) {
            repaint();
        }
    }//GEN-LAST:event_deckActionPerformed

    private void difficultyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_difficultyActionPerformed
        
        levelDlg.setVisible(true);
        
        if (pane.getRetValue()) {
            level = pane.getLevel();
            game.init(level);
        }
    }//GEN-LAST:event_difficultyActionPerformed

    private void undoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoActionPerformed
        game.undo();
    }//GEN-LAST:event_undoActionPerformed

    private void redoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoActionPerformed
        game.redo();
    }//GEN-LAST:event_redoActionPerformed

    private void onWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_onWindowOpened
        levelDlg.setVisible(true);

        if (pane.getRetValue()) {
            level = pane.getLevel();
            game.init(level);
        }
    }//GEN-LAST:event_onWindowOpened

    private void loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadActionPerformed
        try {
            game.load(FILE_NAME);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Failed to load game.");
        }
    }//GEN-LAST:event_loadActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        try {
            game.save(FILE_NAME);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Failed to save game.");
        }
    }//GEN-LAST:event_saveActionPerformed

    private void dealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dealActionPerformed
        if (level == null) {
            levelDlg.setVisible(true);
            
            if (pane.getRetValue()) {
                level = pane.getLevel();
                game.init(level);
            }
        } else {
            game.init(level);
        }
    }//GEN-LAST:event_dealActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem about;
    private javax.swing.JMenuItem contents;
    private javax.swing.JMenuItem deal;
    private javax.swing.JMenuItem deck;
    private javax.swing.JMenuItem difficulty;
    private javax.swing.JMenuItem exit;
    private javax.swing.JMenu gameMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem load;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem redo;
    private javax.swing.JMenuItem save;
    private javax.swing.JSeparator sep;
    private javax.swing.JSeparator sep1;
    private javax.swing.JSeparator sep2;
    private javax.swing.JSeparator sep3;
    private javax.swing.JSeparator sep4;
    private javax.swing.JMenuItem undo;
    // End of variables declaration//GEN-END:variables

    private Game game;
    private String level;
    
    private JDialog levelDlg;
    private LevelPanel pane;
    
    private JDialog rearDlg;
    private RearPanel rearPane;
    
    private static final String APP_NAME = "Scorpion Solitaire";
    private static final String FILE_NAME = "Scorpion.dat";
}
